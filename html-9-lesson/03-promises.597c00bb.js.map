{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,uBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UAgC/B,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUP,MAAAQ,IAEpBM,EAAO,CAAEE,SAAAT,EAAUP,MAAAQ,G,GAEpBA,E,IAnCPT,EAAKM,KAAKY,iBAAiB,UAE3B,SAAwBC,GACtBA,EAAEC,iBAKF,IAJA,IAAMC,EAAiBC,OAAOtB,EAAKK,OAAOkB,OACpCC,EAAaF,OAAOtB,EAAKI,KAAKmB,OAC9BE,EAAmBH,OAAOtB,EAAKC,MAAMsB,OAElCG,EAAI,EAAGA,EAAIL,EAAgBK,GAAK,EAIvCnB,EAFWmB,EAAI,EADPD,EAAmBD,EAAaE,GAIrCC,MAAK,SAAAC,G,IAAGC,EAAQD,EAARX,SAAUa,EAAKF,EAAL3B,MACjB8B,EAAAjC,GAASkC,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGQ,EAAQR,EAARX,SAAUoB,EAAKT,EAAL3B,MAClB8B,EAAAjC,GAASkC,OAAOM,QACd,sBAAqCJ,OAAfE,EAAS,QAAYF,OAANG,EAAM,M","sources":["src/js/js-9-lesson/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\" ]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nlet delay = 0;\nlet position = 0;\n\nrefs.form.addEventListener('submit', hendleBtnClick);\n\nfunction hendleBtnClick(e) {\n  e.preventDefault();\n  const quantityPromis = Number(refs.amount.value);\n  const stepPromis = Number(refs.step.value);\n  const firstDelayPromis = Number(refs.delay.value);\n\n  for (let i = 0; i < quantityPromis; i += 1) {\n    delay = firstDelayPromis + stepPromis * i;\n    position = i + 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ejkSG","parcelRequire","$8f2376a64c42788f$var$refs","delay","document","querySelector","step","amount","form","$8f2376a64c42788f$var$createPromise","position3","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","addEventListener","e","preventDefault","quantityPromis","Number","value","stepPromis","firstDelayPromis","i","then","param","position1","delay1","$parcel$interopDefault","Notify","success","concat","catch","position2","delay2","failure"],"version":3,"file":"03-promises.597c00bb.js.map"}