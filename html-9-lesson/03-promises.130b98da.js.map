{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,uBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UAG/B,IAAII,EAAQ,EACRC,EAAW,EA4Bf,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,CAAEG,SAAAT,EAAUT,MAAAU,IAEpBM,EAAO,CAAEE,SAAAT,EAAUT,MAAAU,GAAQ,GAE5BA,EAAM,G,CAnCbX,EAAKM,KAAKc,iBAAiB,UAE3B,SAAwBC,GACtBA,EAAEC,iBACF,MAAMC,EAAiBC,OAAOxB,EAAKK,OAAOoB,OACpCC,EAAaF,OAAOxB,EAAKI,KAAKqB,OAC9BE,EAAmBH,OAAOxB,EAAKC,MAAMwB,OAE3C,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAgBK,GAAK,EACvCrB,EAAQoB,EAAmBD,EAAaE,EACxCpB,EAAWoB,EAAI,EAEfnB,EAAcD,EAAUD,GACrBsB,MAAK,EAAGV,SAAAW,EAAU7B,MAAA8B,MACjBC,EAAAlC,GAASmC,OAAOC,QACd,uBAAqBJ,QAAiBC,MAAU,IAGnDI,OAAM,EAAGhB,SAAAiB,EAAUnC,MAAAoC,MAClBL,EAAAlC,GAASmC,OAAOK,QACd,sBAAoBF,QAAeC,MAAU,G","sources":["src/js/js-9-lesson/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\" ]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form'),\n};\n\nlet delay = 0;\nlet position = 0;\n\nrefs.form.addEventListener('submit', hendleBtnClick);\n\nfunction hendleBtnClick(e) {\n  e.preventDefault();\n  const quantityPromis = Number(refs.amount.value);\n  const stepPromis = Number(refs.step.value);\n  const firstDelayPromis = Number(refs.delay.value);\n\n  for (let i = 0; i < quantityPromis; i += 1) {\n    delay = firstDelayPromis + stepPromis * i;\n    position = i + 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$1GAPJ","parcelRequire","$898af61a22e978ea$var$refs","delay","document","querySelector","step","amount","form","$898af61a22e978ea$var$delay","$898af61a22e978ea$var$position","$898af61a22e978ea$var$createPromise","position3","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","addEventListener","e","preventDefault","quantityPromis","Number","value","stepPromis","firstDelayPromis","i","then","position1","delay1","$parcel$interopDefault","Notify","success","catch","position2","delay2","failure"],"version":3,"file":"03-promises.130b98da.js.map"}